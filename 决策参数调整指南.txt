初赛没有用到调参，特写关于调参的说明如下：

基本参数：

种子：seed 为当前种子，在 init 函数中计算，seeds 为各个地图的种子，seed_MOD 为计算种子时使用的哈希模数。

Stop_frame：类似 fun4 但是不同，Stop_frame 一般比 fun4 更晚起效，并且效果更强。它指示了一个帧，当帧数超过这个值时，所有 buy 指令被阻断（但是不影响做决策，虽然决策后不会 buy）。

parameter 列表中的标准参数：

fun1 fun2 fun3 作用于第一层决策（制作哪个 4/5/6 号物品）。

fun4 fun5 fun6 作用于第二层决策（这个物品送到哪去）。

fun1（均衡核心参数）:

传入值 remain（场上将要制造的商品的剩余量），该函数会根据 remain 计算权值。计算方式一般是通过一个前端降幅很厉害的降函数进行。目的是让场上的物品尽量平均。是对 “让各个七号工作台都完美的，互不干扰的，不阻塞的运行流水线” 这一目的（后简称【七目】，是决策核心）的粗调，也是效力最强的调整。

其可以做出智能的决策：一方面它可以探究做哪个物品最麻烦，即需要时间最长（所以场上的该种物品会最少），然后让更多的小车去生产该种物品，是流水线的阻塞尽量小从而完成【七目】。另一方面，它和后面的 fun6 配合，可以尽量的让马上就可以生产物品的 7 号工作台先开始生产，从而完成【七目】。

fun2（核心生产调配参数）：

由于贪心假设【二】（见文档末），使用 fun2 解决误差。方式是：对于刚刚开始生产的物品，有一个减权，从而防止小车等待物品生产时间过长（贪心假设【二】【误差一】）。对于已经生产完毕的物品，有一个加权，从而让小车优先再生产一个该种商品，并顺路卖掉上一个，从而赚取这个已经生产完毕的商品的利润。防止产品不买入并卖出（贪心假设【二】【误差二】）

两个误差当前的加权和减权是对称的，并且根据生产时间线性改变加权。这是不严谨的。可以调整的。

fun3（原料偏好控制参数）【未使用】：

通过角度确立原料的选择。因为某些原因不投入使用。

fun4（抑制参数）：

作用类似 Stop_frame，但是起作用更早，效力更弱。当当前帧数超过 fun4 设立的帧数后，距离造成的权重影响会更大。从而使小车倾向于做出时间消耗更短的决策，防止进入 Stop_frame 后决策还是没有做完。

可以注意到，快结束时会首先进入 fun4 带来的抑制区间，再进入 Stop_frame 的截止区间。从而平滑的完成最后的决策。

fun5（核心控制参数以及核心出售调配参数）：

该参数实际上可以分为两个参数：一方面它判断目的工作台是不是 7 号，如果不是 7 号（即是 9 号）会提供一个抑制的减权，这个减权会区分两种决策，一种是直接送 9，一种是 【七目】。如果是 7 号就不会改变加权，送入 【七目】 决策中。

另一方面是类似 fun2 的调配参数。效果同 fun2，不赘述。

这个参数有两点与 fun2 不同：

一点是：当某个产品没有开始生产时，它这个生产路径就没有开通。我们为了让各个路径更好的运行，应该更早的开通这条路径，所以应该给一个比较高的加权。

另一点是：如果格子上没到 2 个商品，这个商品加入后，哪怕正在生产，也不会产生等待，所以不需要提供一个减权。

fun6（出售调配促进参数）：

fun6 针对没有当前物品的 7 号工作台，它传入 7 号工作台已经放好的原料数量。当原料越多时，越倾向于把当前物品送入那个七号工作台。配合 fun1 尽量的让马上就可以生产物品的 7 号工作台先开始生产，完成 【七目】。

注意一点：fun6 没有考虑当前运送情况，请考虑了历史情况，这意味着如果一个机器人在往某个 7 送 4，另一个机器人准备送 5，但是因为那个 4 还没有送到，所以这个 5 不会优先去送到第一个 7。但是这影不影响【七目】呢？似乎不太影响，因为 fun1 还是会补充两个 7，然后 fun6 起作用。后来也会补上，不是很影响流水线。就是最后几个可能会有一些影响。
注释掉 fun6 的第一行可以部份缓解这个问题。


- 特殊情况说明：

一、7 号很多的地图。

初赛没有这种地图。这种地图可能导致不曾预料的错误，但是影响应该不大。

二、7 号 9 号共同存在的地图。

这是一种常见的地图，但是初赛没有。这种情况需要调整 fun5 的 is_7 权重，从而在去 7 号还是 9 号中做出权衡。

- 贪心假设：

一、生产 4 5 6 为基石

生产 4 5 6 为基石，不考虑下发的情况（最多只会有若干个 1/2 纯利润的误差，往往达不到，与最优解很接近）

二、两层生产 

假设两层生产（放入材料并且正在生产，或放入材料并且有产品），不会使用三层生产（放入材料，并且正在生产，并且有产品）。三层生产的流水线很难达到（甚至会带来亏损），一般二层生产即可。如果材料放入后正在生产上一轮，则等待至生产完毕（会带来等待误差，该误差由 fun2/fun5 均衡，是 贪心假设【二】【误差一】），保证所有的“把产品拿走卖掉”的决策是与上一次送原料顺路的从而减小误差（可能导致不运送产品导致的误差，由 fun2/fun5 均衡，是 贪心假设【二】【误差二】）。

注意：两种误差都由 fun2/fun5 以同样的参数解决，但不是同一种误差。

初赛 330w 参数列表：

fun1: e^-x 1/log(x+1) 1/(x+1)
fun2: 0.8 - 1.2   /1250
fun3: /
fun4: 8500  1/dis
fun5: 0.8 -0.01 1.2 /2500
fun6: /10

